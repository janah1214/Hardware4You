@page "/ShoppingCart"
@attribute [Authorize(Roles = "standard")]

@using Hardware4You.Data
@using Hardware4You.Data.ShoppingCart
@using Hardware4You.Models
@using MudBlazor
@inject CartService CartService
@inject IProductService ProductService
@inject IBuyingHistoryService BuyingHistoryService

<h3>Warenkorb</h3>

@if (Products.Count() > 0)
{
    <br><h4>Du hast @Products.Count() Artikel im Warenkorb</h4>

    <MudPaper Class="d-flex flex-wrap gap-4" Elevation="0">
        @foreach (var product in Products)
        {
            <MudPaper Class="mud-theme-primary" Width="156px" Height="250px" src="@product.ImageURL">
                <img src="@product.ImageURL" class="card-img">
                <h6 class="card-title">@product.Name</h6>
                <blockquote class="card-text">@product.Price CHF</blockquote>
            </MudPaper>
        }
    </MudPaper>

    <br>
    <h6><b>Totalbetrag: @TotalPrice CHF</b></h6>
    <hr /><br />
    <h4>Lieferadresse</h4>
    <MudTextField @bind-Value="Name" Label="Vorname / Nachname *" Variant="Variant.Text" InputType="InputType.Text" Adornment="Adornment.Start" />
    <MudTextField @bind-Value="Street" Label="Strasse *" Variant="Variant.Text" InputType="InputType.Text" Adornment="Adornment.Start" />
    <MudTextField @bind-Value="ZIPCode" Label="PLZ *" Variant="Variant.Text" InputType="InputType.Text" Adornment="Adornment.Start" />
    <MudTextField @bind-Value="City" Label="Stadt *" Variant="Variant.Text" InputType="InputType.Text" Adornment="Adornment.Start" /><br />

    @if (Name != null && Street != null && ZIPCode != null && City != null)
    {
        <button class="btn btn-primary" type="button" @onclick="() => Checkout(Products.ToList())">
            <MudIcon Icon="@Icons.Material.Filled.ShoppingCartCheckout" /> Kaufen
        </button>
    }
    else
    {
        <button class="btn btn-primary" style="background-color: lightgray" type="button">
            <MudIcon Icon="@Icons.Material.Filled.ShoppingCartCheckout" /> Kaufen
        </button>
    }
}
else
{
    @if (ClickedOnCheckoutButton)
    {
        <br /><p>Dein Warenkorb wurde geleert.</p>
        <br /><p>Danke für deine Bestellung!</p>
    }
    else
    {
        <br><h4>Du hast keine Artikel im Warenkorb.</h4>
    }
}

@code {
    public IEnumerable<Product> Products { get; set; } = null!;

    public bool ClickedOnCheckoutButton { get; set; } = false;

    public int TotalPrice { get; set; } = 0;

    public string Name { get; set; }

    public string Street { get; set; }

    public string ZIPCode { get; set; }

    public string City { get; set; }

    public string ProductId { get; set; }

    protected override void OnInitialized()
    {
        Products = CartService.SelectedItems;

        foreach(var p in Products)
        {
            TotalPrice += p.Price;
            ProductId += p.Id + ";";
        }
    }

    private void Checkout(List<Product> products)
    {
        foreach(var p in products)
        {
            CartService.BuyProductInCart(p);
            ProductService.UpdateProduct(p.Id, p);
        }

        var buyinghistory = CreateBuyingHistory();
        BuyingHistoryService.InsertBuyingHistory(buyinghistory);

        Products = CartService.SelectedItems = new();
        ClickedOnCheckoutButton = true;
    }

    private BuyingHistory CreateBuyingHistory()
    {
        BuyingHistory data = new BuyingHistory()
            {
                Name = Name,
                Street = Street,
                ZIPCode = ZIPCode,
                City = City,
                ProductId = ProductId,
                // TODO: Logik Pickupdate einbauen
                PickupDate = DateTime.Today.AddDays(14),
                TimeStamp = DateTime.Now,
                State = "Offen",
                User = ""
            };

        return data;
    }
}
